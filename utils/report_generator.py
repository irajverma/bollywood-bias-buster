import json
import os
from datetime import datetime
from typing import Dict, Any, List
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend

class BiasReportGenerator:
    def __init__(self):
        self.reports_dir = "reports"
        os.makedirs(self.reports_dir, exist_ok=True)

    def generate_html_report(self, analysis_data: Dict[str, Any]) -> str:
        """Generate HTML bias report"""
        html_content = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Bias Analysis Report - {analysis_data.get('movie_title', 'Unknown Movie')}</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }}
                .container {{ max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }}
                .header {{ text-align: center; margin-bottom: 30px; }}
                .score-card {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; text-align: center; margin: 20px 0; }}
                .bias-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 20px 0; }}
                .bias-item {{ background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #007bff; }}
                .character-list {{ background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0; }}
                .high-bias {{ border-left-color: #dc3545; }}
                .medium-bias {{ border-left-color: #ffc107; }}
                .low-bias {{ border-left-color: #28a745; }}
                .recommendations {{ background: #e7f3ff; padding: 20px; border-radius: 8px; margin: 20px 0; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>ðŸŽ¬ Gender Bias Analysis Report</h1>
                    <h2>{analysis_data.get('movie_title', 'Unknown Movie')}</h2>
                    <p>Generated on {datetime.now().strftime('%B %d, %Y at %I:%M %p')}</p>
                </div>

                <div class="score-card">
                    <h2>Overall Bias Score</h2>
                    <h1>{analysis_data.get('bias_scores', {}).get('overall', 0):.1f}/100</h1>
                    <p>Bias Level: {self._get_bias_level(analysis_data.get('bias_scores', {}).get('overall', 0))}</p>
                </div>

                <div class="bias-grid">
                    {self._generate_bias_items_html(analysis_data.get('bias_scores', {}))}
                </div>

                <div class="character-list">
                    <h3>ðŸ“‹ Character Analysis</h3>
                    {self._generate_character_analysis_html(analysis_data.get('characters', []))}
                </div>

                <div class="recommendations">
                    <h3>ðŸ’¡ Recommendations for Improvement</h3>
                    {self._generate_recommendations_html(analysis_data)}
                </div>

                <div style="text-align: center; margin-top: 30px; color: #666;">
                    <p>Report generated by Bollywood Bias Buster</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        # Save HTML report
        filename = f"{self.reports_dir}/bias_report_{analysis_data.get('movie_title', 'unknown').replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return filename

    def _get_bias_level(self, score: float) -> str:
        """Get bias level description"""
        if score >= 70:
            return "High - Significant bias detected"
        elif score >= 40:
            return "Medium - Moderate bias present"
        else:
            return "Low - Minimal bias detected"

    def _generate_bias_items_html(self, bias_scores: Dict[str, float]) -> str:
        """Generate HTML for bias score items"""
        items = []
        bias_descriptions = {
            'occupation_gap': 'Professional representation gap between genders',
            'agency_gap': 'Decision-making power imbalance',
            'appearance_focus': 'Emphasis on physical appearance over other qualities',
            'relationship_defining': 'Characters defined primarily through relationships',
            'dialogue_imbalance': 'Unequal speaking time distribution',
            'screen_time_imbalance': 'Unequal screen presence'
        }
        
        for bias_type, score in bias_scores.items():
            if bias_type == 'overall':
                continue
            
            bias_class = 'high-bias' if score >= 60 else 'medium-bias' if score >= 30 else 'low-bias'
            description = bias_descriptions.get(bias_type, 'Bias metric')
            
            items.append(f"""
                <div class="bias-item {bias_class}">
                    <h4>{bias_type.replace('_', ' ').title()}</h4>
                    <p><strong>{score:.1f}/100</strong></p>
                    <p>{description}</p>
                </div>
            """)
        
        return ''.join(items)

    def _generate_character_analysis_html(self, characters: List[Dict[str, Any]]) -> str:
        """Generate HTML for character analysis"""
        if not characters:
            return "<p>No character data available</p>"
        
        html = "<table style='width: 100%; border-collapse: collapse;'>"
        html += "<tr style='background: #f1f1f1;'><th style='padding: 10px; border: 1px solid #ddd;'>Character</th><th style='padding: 10px; border: 1px solid #ddd;'>Gender</th><th style='padding: 10px; border: 1px solid #ddd;'>Professions</th><th style='padding: 10px; border: 1px solid #ddd;'>Agency Level</th></tr>"
        
        for char in characters:
            professions = ', '.join(char.get('professions', [])) or 'None specified'
            agency = char.get('agency_level', 0)
            agency_color = '#28a745' if agency >= 7 else '#ffc107' if agency >= 4 else '#dc3545'
            
            html += f"""
                <tr>
                    <td style='padding: 10px; border: 1px solid #ddd;'>{char.get('name', 'Unknown')}</td>
                    <td style='padding: 10px; border: 1px solid #ddd;'>{char.get('gender', 'Unknown').title()}</td>
                    <td style='padding: 10px; border: 1px solid #ddd;'>{professions}</td>
                    <td style='padding: 10px; border: 1px solid #ddd; color: {agency_color}; font-weight: bold;'>{agency}/10</td>
                </tr>
            """
        
        html += "</table>"
        return html

    def _generate_recommendations_html(self, analysis_data: Dict[str, Any]) -> str:
        """Generate recommendations based on analysis"""
        recommendations = []
        bias_scores = analysis_data.get('bias_scores', {})
        
        if bias_scores.get('occupation_gap', 0) > 50:
            recommendations.append("â€¢ Add professional identities to female characters beyond family relationships")
        
        if bias_scores.get('agency_gap', 0) > 50:
            recommendations.append("â€¢ Give female characters more decision-making roles and active agency")
        
        if bias_scores.get('appearance_focus', 0) > 50:
            recommendations.append("â€¢ Reduce emphasis on physical appearance in character descriptions")
        
        if bias_scores.get('dialogue_imbalance', 0) > 50:
            recommendations.append("â€¢ Balance dialogue distribution between male and female characters")
        
        if not recommendations:
            recommendations.append("â€¢ Great job! This content shows relatively low gender bias")
            recommendations.append("â€¢ Continue maintaining balanced character representation")
        
        return '<br>'.join(recommendations)

    def generate_pdf_report(self, analysis_data: Dict[str, Any]) -> str:
        """Generate PDF bias report"""
        try:
            from reportlab.lib.pagesizes import letter, A4
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
            from reportlab.lib.units import inch
            from reportlab.lib import colors
            
            filename = f"{self.reports_dir}/bias_report_{analysis_data.get('movie_title', 'unknown').replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            
            doc = SimpleDocTemplate(filename, pagesize=A4)
            styles = getSampleStyleSheet()
            story = []
            
            # Title
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=24,
                spaceAfter=30,
                alignment=1  # Center alignment
            )
            story.append(Paragraph(f"Gender Bias Analysis Report", title_style))
            story.append(Paragraph(f"{analysis_data.get('movie_title', 'Unknown Movie')}", styles['Heading2']))
            story.append(Spacer(1, 20))
            
            # Overall Score
            overall_score = analysis_data.get('bias_scores', {}).get('overall', 0)
            story.append(Paragraph(f"Overall Bias Score: {overall_score:.1f}/100", styles['Heading2']))
            story.append(Paragraph(f"Bias Level: {self._get_bias_level(overall_score)}", styles['Normal']))
            story.append(Spacer(1, 20))
            
            # Bias Scores Table
            bias_data = [['Bias Type', 'Score', 'Level']]
            bias_scores = analysis_data.get('bias_scores', {})
            
            for bias_type, score in bias_scores.items():
                if bias_type != 'overall':
                    level = 'High' if score >= 60 else 'Medium' if score >= 30 else 'Low'
                    bias_data.append([bias_type.replace('_', ' ').title(), f"{score:.1f}", level])
            
            bias_table = Table(bias_data)
            bias_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 14),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            story.append(bias_table)
            story.append(Spacer(1, 20))
            
            # Character Analysis
            story.append(Paragraph("Character Analysis", styles['Heading2']))
            characters = analysis_data.get('characters', [])
            
            if characters:
                char_data = [['Character', 'Gender', 'Professions', 'Agency Level']]
                for char in characters:
                    professions = ', '.join(char.get('professions', [])) or 'None'
                    char_data.append([
                        char.get('name', 'Unknown'),
                        char.get('gender', 'Unknown').title(),
                        professions,
                        f"{char.get('agency_level', 0)}/10"
                    ])
                
                char_table = Table(char_data)
                char_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, 0), 12),
                    ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                
                story.append(char_table)
            else:
                story.append(Paragraph("No character data available", styles['Normal']))
            
            story.append(Spacer(1, 20))
            
            # Recommendations
            story.append(Paragraph("Recommendations", styles['Heading2']))
            recommendations_text = self._generate_recommendations_html(analysis_data).replace('<br>', '\n').replace('â€¢', 'â€¢')
            story.append(Paragraph(recommendations_text, styles['Normal']))
            
            # Build PDF
            doc.build(story)
            return filename
            
        except ImportError:
            # Fallback to simple text report if ReportLab not available
            return self._generate_text_report(analysis_data)

    def _generate_text_report(self, analysis_data: Dict[str, Any]) -> str:
        """Generate simple text report as fallback"""
        filename = f"{self.reports_dir}/bias_report_{analysis_data.get('movie_title', 'unknown').replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("GENDER BIAS ANALYSIS REPORT\n")
            f.write("=" * 50 + "\n\n")
            f.write(f"Movie: {analysis_data.get('movie_title', 'Unknown Movie')}\n")
            f.write(f"Generated: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}\n\n")
            
            # Overall Score
            overall_score = analysis_data.get('bias_scores', {}).get('overall', 0)
            f.write(f"OVERALL BIAS SCORE: {overall_score:.1f}/100\n")
            f.write(f"Bias Level: {self._get_bias_level(overall_score)}\n\n")
            
            # Individual Scores
            f.write("DETAILED BIAS SCORES:\n")
            f.write("-" * 30 + "\n")
            bias_scores = analysis_data.get('bias_scores', {})
            for bias_type, score in bias_scores.items():
                if bias_type != 'overall':
                    f.write(f"{bias_type.replace('_', ' ').title()}: {score:.1f}/100\n")
            
            f.write("\nCHARACTER ANALYSIS:\n")
            f.write("-" * 30 + "\n")
            characters = analysis_data.get('characters', [])
            for char in characters:
                f.write(f"Name: {char.get('name', 'Unknown')}\n")
                f.write(f"Gender: {char.get('gender', 'Unknown').title()}\n")
                f.write(f"Professions: {', '.join(char.get('professions', [])) or 'None'}\n")
                f.write(f"Agency Level: {char.get('agency_level', 0)}/10\n\n")
            
            f.write("RECOMMENDATIONS:\n")
            f.write("-" * 30 + "\n")
            recommendations = self._generate_recommendations_html(analysis_data).replace('<br>', '\n').replace('â€¢', 'â€¢')
            f.write(recommendations)
        
        return filename

    def generate_comparison_report(self, analyses: List[Dict[str, Any]]) -> str:
        """Generate comparison report for multiple movies"""
        html_content = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Bias Comparison Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }}
                .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.1); }}
                .comparison-table {{ width: 100%; border-collapse: collapse; margin: 20px 0; }}
                .comparison-table th, .comparison-table td {{ padding: 12px; border: 1px solid #ddd; text-align: center; }}
                .comparison-table th {{ background: #f1f1f1; }}
                .high-score {{ background-color: #ffebee; color: #c62828; }}
                .medium-score {{ background-color: #fff3e0; color: #ef6c00; }}
                .low-score {{ background-color: #e8f5e8; color: #2e7d32; }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ðŸŽ¬ Bias Comparison Report</h1>
                <p>Comparing gender bias across multiple movies</p>
                
                <table class="comparison-table">
                    <tr>
                        <th>Movie</th>
                        <th>Overall Score</th>
                        <th>Occupation Gap</th>
                        <th>Agency Gap</th>
                        <th>Appearance Focus</th>
                        <th>Bias Level</th>
                    </tr>
                    {self._generate_comparison_rows(analyses)}
                </table>
                
                <div style="text-align: center; margin-top: 30px; color: #666;">
                    <p>Report generated by Bollywood Bias Buster</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        filename = f"{self.reports_dir}/bias_comparison_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return filename

    def _generate_comparison_rows(self, analyses: List[Dict[str, Any]]) -> str:
        """Generate comparison table rows"""
        rows = []
        for analysis in analyses:
            bias_scores = analysis.get('bias_scores', {})
            overall = bias_scores.get('overall', 0)
            
            score_class = 'high-score' if overall >= 60 else 'medium-score' if overall >= 30 else 'low-score'
            
            rows.append(f"""
                <tr>
                    <td>{analysis.get('movie_title', 'Unknown')}</td>
                    <td class="{score_class}">{overall:.1f}</td>
                    <td>{bias_scores.get('occupation_gap', 0):.1f}</td>
                    <td>{bias_scores.get('agency_gap', 0):.1f}</td>
                    <td>{bias_scores.get('appearance_focus', 0):.1f}</td>
                    <td class="{score_class}">{self._get_bias_level(overall)}</td>
                </tr>
            """)
        
        return ''.join(rows)

# Example usage
if __name__ == "__main__":
    generator = BiasReportGenerator()
    
    # Sample data
    sample_data = {
        'movie_title': 'Test Movie',
        'bias_scores': {
            'overall': 65.0,
            'occupation_gap': 70.0,
            'agency_gap': 60.0,
            'appearance_focus': 55.0,
            'relationship_defining': 75.0,
            'dialogue_imbalance': 45.0,
            'screen_time_imbalance': 50.0
        },
        'characters': [
            {
                'name': 'Priya',
                'gender': 'female',
                'professions': [],
                'agency_level': 3
            },
            {
                'name': 'Rohit',
                'gender': 'male',
                'professions': ['engineer'],
                'agency_level': 8
            }
        ]
    }
    
    # Generate reports
    html_file = generator.generate_html_report(sample_data)
    print(f"HTML report generated: {html_file}")
    
    try:
        pdf_file = generator.generate_pdf_report(sample_data)
        print(f"PDF report generated: {pdf_file}")
    except Exception as e:
        print(f"PDF generation failed: {e}")
